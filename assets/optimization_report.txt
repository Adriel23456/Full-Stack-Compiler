============================================================
LLVM IR OPTIMIZATION REPORT
============================================================
Optimization Level: 3
Platform: windows
Input: c:\Users\Adriel\Desktop\Informacion-de-Prioridad\ProgramasCV\Full-Stack-Compiler\out\vGraph.ll
Output: c:\Users\Adriel\Desktop\Informacion-de-Prioridad\ProgramasCV\Full-Stack-Compiler\out\vGraph_opt.ll

Optimization Statistics:
----------------------------------------
Metric                   Before      After     Change
----------------------------------------
functions                     3          3          0
globals                      13         14         +1
alloca                        2          0         -2
load                         66         38        -28
store                        34         26         -8
calls                        23         24         +1
branches                     46         16        -30
basic_blocks                 49          3        -46
total_lines                 445        306       -139

Optimizations Applied:
----------------------------------------
[OK] Constant merging
[OK] Dead argument elimination
[OK] Global dead code elimination
[OK] Global optimization
[OK] Function inlining
[OK] Control flow simplification
[OK] Instruction combining
[OK] Global value numbering
[OK] Dead code elimination
[OK] Aggressive dead code elimination
[OK] Loop unrolling
[OK] Loop invariant code motion

Optimization complete (Level 3)
Lines: 457 -> 335 (26.7% reduction)
Output: vGraph_opt.ll